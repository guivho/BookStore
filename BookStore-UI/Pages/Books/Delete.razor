@page "/books/delete/{Id}"
@attribute [Authorize(Roles = "Administrator")]
@inject NavigationManager _navigationManager
@inject IBookRepository _bookRepository
@inject IAuthorRepository _authorRepository
@inject IFileUpload _fileUpload
@inject IToastService _toastService


<h5 class="card-title">Are You Sure You Want to Delete this Book?</h5>


@if (Book == null)
{
    <LoadingMessage Message="Loading Book Details" />
}
else
{
    @if (!DeleteSuccessful)
    {
        <ErrorMessage Message="Something went wrong when deleting the book." />
    }
    <EditForm Model="Book" OnValidSubmit="DeleteBook">
        <div class="form-group">
            <label for="title">First Name</label>
            <InputText @bind-Value="Book.Title" class="form-control" id="title" readonly />
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <select @bind="Book.AuthorId" class="form-control" id="author" readonly>
                <option value="">-- Select Author --</option>
                @if (Authors != null)
                {
                    foreach (var author in Authors)
                    {
                        <option value="@author.Id">@author.Firstname @author.Lastname</option>
                    }
                }
            </select>
        </div>

        <button type="submit" class="btn btn-danger"><span class="oi oi-delete" /> Delete Book</button>
        <BackToList TargetUrl="/books/" Message="Back to Books List" />


    </EditForm>
}


@code {
    [Parameter]
    public string Id { get; set; }

    private Book Book = new Book();

    private bool DeleteSuccessful = true;
    private IList<Author> Authors;

    private int id = 0;

    protected async override Task OnInitializedAsync()
    {
        int.TryParse(Id, out id);
        Book = await _bookRepository.Get(Endpoints.BooksEndpoint, id);
        Authors = await _authorRepository.Get(Endpoints.AuthorsEndpoint);
    }

    private async void DeleteBook()
    {
        if (!String.IsNullOrWhiteSpace(Book.Image))
        {
            _fileUpload.RemoveFile(Book.Image);
        }
        DeleteSuccessful = await _bookRepository.Delete(Endpoints.BooksEndpoint, id);
        if (DeleteSuccessful)
        {
            _toastService.ShowSuccess("Book Deleted.");
            Util.NavigateTo(_navigationManager, "/books/");
        }
    }
}
