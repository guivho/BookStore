@page "/books/create/"
@attribute [Authorize(Roles = "Administrator")]

@inject IAuthorRepository _authorRepository
@inject IBookRepository _bookRepository
@inject IFileUpload _fileUpload

@inject NavigationManager _navigationManager
@inject IToastService _toastService


<h3>Create Book</h3>
<hr />


@if (!CreateSuccessful)
{
    <ErrorMessage Message="Something went wrong when saving the book details." />
}
else
{
    <EditForm Model="Book" OnValidSubmit="CreateBook">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Title</label>
            <InputText @bind-Value="Book.Title" class="form-control" id="title" />
            <ValidationMessage For="@(() => Book.Title)" />
        </div>
        <div class="form-group">
            <label for="isbn">ISBN</label>
            <InputText @bind-Value="Book.Isbn" class="form-control" id="isbn" />
            <ValidationMessage For="@(() => Book.Isbn)" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber @bind-Value="Book.Price" class="form-control" id="price" />
            <ValidationMessage For="@(() => Book.Price)" />
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <select @bind="Book.AuthorId" class="form-control" id="author">
                <option value="">-- Select Author --</option>
                @if (Authors != null)
                {
                    foreach (var author in Authors)
                    {
                        <option value="@author.Id">@author.Firstname @author.Lastname</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="summary">Summary</label>
            <InputTextArea @bind-Value="Book.Summary" class="form-control" id="summary" />
            <ValidationMessage For="@(() => Book.Summary)" />
        </div>
        <div class="form-group">
            <label for="cover">Book Cover Image</label>
            <InputFile OnChange="HandleFileSelection" />
            @if (!isValidFile)
            {
                <ErrorMessage Message="Please select a jpg/jpeg/png file or leave field empty" />
            }
            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" style="height:100px;width:100px" />
            }
        </div>

        <button type="submit" class="btn btn-primary"><span class="oi oi-plus" /> Create Book</button>
        <BackToList TargetUrl="/books/" Message="Back to Books List" />
    </EditForm>
}

@code {
    private Book Book = new Book();
    private bool CreateSuccessful = true;
    private IFileListEntry file;
    private IList<Author> Authors;
    private bool isValidFile = true;
    private string imageDataURL;
    private MemoryStream memoryStream;

    private async void CreateBook()
    {
        if (isValidFile)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                await _fileUpload.UploadFile(file, memoryStream, picName);

                Book.Image = picName;
            }

            CreateSuccessful = await _bookRepository.Create(Endpoints.BooksEndpoint, Book);
            if (CreateSuccessful)
            {
                _toastService.ShowSuccess("Book Created.");
                Util.NavigateTo(_navigationManager, "/books/");
            }
        }
    }

    protected async override Task OnInitializedAsync()
    {
        Authors = await _authorRepository.Get(Endpoints.AuthorsEndpoint);
    }

    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            var name = file.Name.ToLower();
            if (name.Contains("jpg") || name.Contains("jpeg") || name.Contains("png"))
            {
                memoryStream = new MemoryStream();
                await file.Data.CopyToAsync(memoryStream);

                var streamReader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(memoryStream.ToArray());
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isValidFile = true;
            }
            else
            {
                imageDataURL = string.Empty;
                isValidFile = false;
            }
        }
        else
        {
            imageDataURL = string.Empty;
            isValidFile = false;
        }
    }
}
