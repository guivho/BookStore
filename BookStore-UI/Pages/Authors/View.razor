@page "/authors/view/{Id}"
@inject NavigationManager _navigationManager
@inject IAuthorRepository _authorRepository

<h5 class="card-title">View Author Details</h5>

@if (Author == null)
{
    <LoadingAuthorData />
}
else
{
    <EditForm Model="Author">
        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText @bind-Value="Author.Firstname" class="form-control" id="firstname" readonly />
        </div>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText @bind-Value="Author.Lastname" class="form-control" id="lastname" readonly />
        </div>
        <div class="form-group">
            <label for="biography">Biography</label>
            <InputTextArea @bind-Value="Author.Bio" class="form-control" id="biography" readonly />
        </div>
    </EditForm>


    @if (Author.Books == null || Author.Books.Count < 1)
    {
        <div class="alert alert-dismissible alert-secondary">
            No Books for this Author.
        </div>
    }
    else
    {
        <div class="card" style="width: 18rem;">
            <div class="card-header">
                <h4>Author's Books</h4>
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var Book in Author.Books)
                {
                    <li class="list-group-item">@Book.Title - @Book.Price</li>
                }
            </ul>
        </div>
    }
    <br/>
    <BackToAuthorsList />
}


@code {
    [Parameter]
    public string Id { get; set; }

    private Author Author = new Author();

    protected async override Task OnInitializedAsync()
    {
        int id = 0;
        int.TryParse(Id, out id);
        Author = await _authorRepository.Get(Endpoints.AuthorsEndpoint, id);
    }
}
