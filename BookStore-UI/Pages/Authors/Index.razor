@page "/authors/"
@* @inject NavigationManager _navigationManager *@
@inject IAuthorRepository _authorRepository

@if (Authors == null)
{

}
else
{
    <AuthorizeView Roles="Administrator">
        <a href="/authors/create/" class="btn btn-primary">
            <span class="oi oi-plus" />
            Create New Author
        </a>

        <br />
        <hr />
    </AuthorizeView>



    @if (Authors.Count > 0)
    {
        <h5 class="card-title">Known Authors</h5>
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in Authors)
                {
                    <tr>
                        <td>@author.Firstname</td>
                        <td>@author.Lastname</td>
                        <td>
                            <a href="/Authors/view/@author.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <AuthorizeView Roles="Administrator">
                                <a href="/Authors/edit/@author.Id" class="btn btn-warning">
                                    <span class="oi oi-pencil"></span>
                                </a>
                                <a href="/Authors/delete/@author.Id" class="btn btn-danger">
                                    <span class="oi oi-delete"></span>
                                </a>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private IList<Author> Authors;

    protected async override Task OnInitializedAsync()
    {
        Authors = await _authorRepository.Get(Endpoints.AuthorsEndpoint);
    }

}
