@page "/authors/edit/{Id}"
@attribute [Authorize(Roles = "Administrator")]
@inject NavigationManager _navigationManager
@inject IAuthorRepository _authorRepository

<h5 class="card-title">Edit Author Details</h5>

@if (Author == null)
{
    <LoadingMessage Message="Loading Author Details" />
} 
else
{
    @if (!UpdateSuccessful)
    {
        <ErrorMessage Message="Something went wrong when saving the author details." />
    }
<EditForm Model="Author" OnValidSubmit="EditAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstname">First Name</label>
        <InputText @bind-Value="Author.Firstname" class="form-control" id="firstname" />
        <ValidationMessage For="@(() => Author.Firstname)" />
    </div>
    <div class="form-group">
        <label for="lastname">Last Name</label>
        <InputText @bind-Value="Author.Lastname" class="form-control" id="lastname" />
        <ValidationMessage For="@(() => Author.Lastname)" />
    </div>
    <div class="form-group">
        <label for="biography">Biography</label>
        <InputTextArea @bind-Value="Author.Bio" class="form-control" id="biography" />
        <ValidationMessage For="@(() => Author.Bio)" />
    </div>

    <button type="submit" class="btn btn-primary"><span class="oi oi-pencil" /> Submit Changes</button>
    <BackToList TargetUrl="/authors/" Message="Back to Authors List" />

</EditForm>
}


@code {
    [Parameter]
    public string Id { get; set; }

    private Author Author = new Author();

    private bool UpdateSuccessful = true;

    private int id = 0;

    protected async override Task OnInitializedAsync()
    {
        int.TryParse(Id, out id);
        Author = await _authorRepository.Get(Endpoints.AuthorsEndpoint, id);
    }

    private async void EditAuthor()
    {
        UpdateSuccessful = await _authorRepository.Update(Endpoints.AuthorsEndpoint, Author, id);
        if (UpdateSuccessful)
        {
            Util.NavigateTo(_navigationManager, "/authors/");
        }
    }
}
