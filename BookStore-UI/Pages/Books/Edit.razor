@page "/books/edit/{id}"
@attribute [Authorize(Roles = "Administrator")]

@inject IAuthorRepository _authorRepository
@inject IBookRepository _bookRepository
@inject IFileUpload _fileUpload
@inject IToastService _toastService
@inject NavigationManager _navigationManager

<h3>Update Book Details</h3>
<hr />


@if (string.IsNullOrWhiteSpace(Id) || int.Parse(Id) < 1)
{
    <ErrorMessage Message="Invalid selection. Please try again." />
}
else if (!UpdateSuccessful)
{
    <ErrorMessage Message="Something went wrong when saving the book details." />
}
else if (Book == null)
{
    <LoadingMessage Message="Loading Book Details" />
}
else
{
    <EditForm Model="Book" OnValidSubmit="UpdateBook">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Title</label>
            <InputText @bind-Value="Book.Title" class="form-control" id="title" />
            <ValidationMessage For="@(() => Book.Title)" />
        </div>
        <div class="form-group">
            <label for="isbn">ISBN</label>
            <InputText @bind-Value="Book.Isbn" class="form-control" id="isbn" />
            <ValidationMessage For="@(() => Book.Isbn)" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber @bind-Value="Book.Price" class="form-control" id="price" />
            <ValidationMessage For="@(() => Book.Price)" />
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <select @bind="Book.AuthorId" class="form-control" id="author">
                <option value="">-- Select Author --</option>
                @if (Authors != null)
                {
                    foreach (var author in Authors)
                    {
                        <option value="@author.Id">@author.Firstname @author.Lastname</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="summary">Summary</label>
            <InputTextArea @bind-Value="Book.Summary" class="form-control" id="summary" />
            <ValidationMessage For="@(() => Book.Summary)" />
        </div>
        <div class="form-group">
            <label for="cover">Book Cover Image</label>
            <InputFile OnChange="HandleFileSelection" />
            @if (!isValidFile)
            {
                <ErrorMessage Message="Please select a jpg/jpeg/png file or leave field empty" />
            }
            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" style="height:100px;width:100px" />
            }
            else if (!string.IsNullOrWhiteSpace(Book.Image))
            {
                <img src="uploads/@Book.Image" style="height:100px;width:100px" />
            }
        </div>

        <BackToList TargetUrl="/books/" />
        <button type="submit" class="btn btn-outline-primary"><span class="oi oi-check" /></button>
    </EditForm>
}

@code {

    [Parameter]
    public string Id { get; set; }
    private int id = 0;
    private Book Book;
    private bool UpdateSuccessful = true;
    private IBrowserFile file;
    private IList<Author> Authors;
    private bool isValidFile = true;
    private string imageDataURL;
    private Stream stream;
    private bool isFileChanged = false;

    protected async override Task OnInitializedAsync()
    {
        int.TryParse(Id, out id);
        Book = await _bookRepository.Get(Endpoints.BooksEndpoint, id);
        Authors = await _authorRepository.Get(Endpoints.AuthorsEndpoint);
    }

    private async void UpdateBook()
    {
        if (isValidFile)
        {
            if (file != null)
            {
                _fileUpload.RemoveFile(Book.Image);
                
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");

                Book.Image = $"{picId}{ext}";
                await _fileUpload.UploadFile(stream, Book.Image);
            }
            else if (isFileChanged && file == null)
            {
                _fileUpload.RemoveFile(Book.Image);
                Book.Image = string.Empty;
            }
            Book.Author = null;
            UpdateSuccessful = await _bookRepository.Update(Endpoints.BooksEndpoint, Book, Book.Id);
            if (UpdateSuccessful)
            {
                _toastService.ShowSuccess("Book Details Updated.");
                Util.NavigateTo(_navigationManager, "/books/");
            }
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File;
        if (file != null)
        {
            var ext = Path.GetExtension(file.Name).ToLower();
            if (ext.Contains("jpg") || ext.Contains("jpeg") || ext.Contains("png"))
            {
                stream = file.OpenReadStream();

                var resizedImageFile = await file.RequestImageFileAsync("image/png", 100, 100);
                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);
                var imageBase64Data = Convert.ToBase64String(buffer);
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isValidFile = true;
            }
            else
            {
                imageDataURL = string.Empty;
                isValidFile = false;
            }
        }
        else
        {
            imageDataURL = string.Empty;
            isValidFile = false;
        }
    }
}
