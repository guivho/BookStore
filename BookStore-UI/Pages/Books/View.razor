@page "/books/view/{Id}"
@attribute [Authorize]
@*@inject NavigationManager _navigationManager*@
@inject IBookRepository _bookRepository

<h5 class="card-title">View Book Details</h5>

@if (Book == null)
{
    if (Message != "")
    {
        <FailedAlert Message="@Message" />
    }
    else
    {
        <LoadingMessage Message="Loading Book Details" />
    }
}
else
{
    <EditForm Model="Book">
        <div class="form-group">
            <label for="title">Title</label>
            <InputText @bind-Value="Book.Title" class="form-control" id="title" readonly />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber @bind-Value="Book.Price" class="form-control" id="price" readonly />
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <InputTextArea @bind-Value="BookAuthor" class="form-control" id="author" readonly />
        </div>
    </EditForm>
}
<BackToList TargetUrl="/books/" Message="Back to Books list." />


@code {
    [Parameter]
    public string Id { get; set; }

    private Book Book = null;
    private string BookPrice;
    private string BookAuthor;
    private string Message = "";

    protected async override Task OnInitializedAsync()
    {
        int id = 0;
        if (int.TryParse(Id, out id))
        {
            Book = await _bookRepository.Get(Endpoints.BooksEndpoint, id);

            BookPrice = Book != null ? Book.Price.ToString() : "";
            BookAuthor = Book != null && Book.Author != null
                ? $"{Book.Author.Lastname}, {Book.Author.Firstname}" : "No author specified";
        }
        else
        {
            Message = "Invalid selection. Please try again!";
        }
    }
}